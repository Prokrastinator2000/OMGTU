using System.Reflection;
string assemblyPath = @"E:\Reflexing\core.dll";

        // Загрузка сборки
        Assembly assembly = Assembly.LoadFrom(assemblyPath);

        // Получение всех типов в сборке
        Type[] types = assembly.GetTypes();

        // Вывод информации о каждом типе (классе или интерфейсе)
        foreach (Type type in types)
        {
            Console.WriteLine($"Type: {type.FullName}");

            // Проверка, является ли тип классом
            if (type.IsClass)
            {
                // Вывод публичных методов класса
                Console.WriteLine("Public Methods:");
                MethodInfo[] methods = type.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);
                foreach (MethodInfo method in methods)
                {
                    Console.Write($"{method.ReturnType.Name} {method.Name}(");
                    ParameterInfo[] parameters = method.GetParameters();
                    for (int i = 0; i < parameters.Length; i++)
                    {
                        Console.Write($"{parameters[i].ParameterType.Name} {parameters[i].Name}");
                        if (i < parameters.Length - 1)
                            Console.Write(", ");
                    }
                    Console.WriteLine(")");
                }
            }

            // Проверка, является ли тип интерфейсом
            if (type.IsInterface)
            {
                // Вывод методов интерфейса
                Console.WriteLine("Methods:");
                MethodInfo[] methods = type.GetMethods();
                foreach (MethodInfo method in methods)
                {
                    Console.Write($"{method.ReturnType.Name} {method.Name}(");
                    ParameterInfo[] parameters = method.GetParameters();
                    for (int i = 0; i < parameters.Length; i++)
                    {
                        Console.Write($"{parameters[i].ParameterType.Name} {parameters[i].Name}");
                        if (i < parameters.Length - 1)
                            Console.Write(", ");
                    }
                    Console.WriteLine(")");
                }
            }
            Console.WriteLine();
        }
