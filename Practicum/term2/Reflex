string assemblyPath = @"E:\Reflexing\core.dll";
// Загрузка сборки
Assembly assembly = Assembly.LoadFrom(assemblyPath);
// Получение всех типов в сборке
Type[] types = assembly.GetTypes();
var Classes = from x in types where x.IsClass select new
    {
        ClassName = x.FullName,
        ClassMethods = from i in x.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static)
        select new { MethodReturnType = i.ReturnType.Name, MethodName = i.Name, MethodParameters = i.GetParameters() }
    };
var Interfaces = from x in types where x.IsInterface select new
    {
        InterfaceName = x.FullName,
        InterfaceMethods = from i in x.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static)
        select new { MethodIReturnType = i.ReturnType.Name, MethodIName = i.Name, MethodIParameters = i.GetParameters() }
    };
foreach (var i in Classes)
    {
        Console.WriteLine($"Class: {i.ClassName}");
        Console.WriteLine("Public Methods:");
        foreach (var j in i.ClassMethods)
            {
                Console.Write($"{j.MethodReturnType} {j.MethodName} (");
                Console.Write(string.Join(", ", j.MethodParameters.Select(p => $"{p.ParameterType.Name} {p.Name}")));
                Console.WriteLine(")");
            }
        Console.WriteLine();
    }
foreach (var i in Interfaces)
    {
        Console.WriteLine($"Interface: {i.InterfaceName}");
        Console.WriteLine("Public Methods:");
        foreach (var j in i.InterfaceMethods)
            {
                Console.Write($"{j.MethodIReturnType} {j.MethodIName} (");
                Console.Write(string.Join(", ", j.MethodIParameters.Select(p => $"{p.ParameterType.Name} {p.Name}")));
                Console.WriteLine(")");
            }
        Console.WriteLine();
    }
