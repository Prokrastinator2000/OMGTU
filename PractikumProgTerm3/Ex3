import numpy as np
import scipy as sci
A = np.array([[1,-4,2,1.4],[2,-3.5,9,0],[7,5,-4,3],[1,2,3,4]])
P, L, U = sci.linalg.lu(A)
print(f"Матрица P (перестановочная) \n{P}\n")
print(f"Матрица L (нижняя треугольная)\n{L}\n")
print(f"Матрица U (верхняя треугольная)\n{U}\n")
#print(np.linalg.det(A))
detA = np.prod(np.diag(L)) * np.prod(np.diag(U)) * np.linalg.det(np.linalg.pinv(P))
print(f"Определитель матрицы A \n{detA}")
uniform_selection = np.random.randint(0,100,100)
normal_selection = np.random.normal(50,10,100)
normal_selection = np.round(normal_selection).astype(int)
print("Равномерное распределение")
print(*uniform_selection)
print("Нормальное распределение")
print(*normal_selection)
print("Сумма Равномерного распределения")
print(np.sum(uniform_selection)/(len(uniform_selection)))
print("Сумма Нормального распределения")
print(np.sum(normal_selection)/(len(normal_selection)))
print("Мода Равномерного распределения")
print(sci.stats.mode(uniform_selection))
print("Мода Нормального распределения")
print(sci.stats.mode(normal_selection))
print("Медиана Равномерного распределения")
print(np.median(uniform_selection))
print("Медиана Нормального распределения")
print(np.median(normal_selection))
print("Минимум Равномерного распределения")
print(np.min(uniform_selection))
print("Минимум Нормального распределения")
print(np.min(normal_selection))
print("Максимум Равномерного распределения")
print(np.max(uniform_selection))
print("Максимум Нормального распределения")
print(np.max(normal_selection))
print("Стандартное отклонение Равномерного распределения")
print(np.std(uniform_selection))
print("Стандартное отклонение Нормального распределения")
print(np.std(normal_selection))

expected_freq = np.ones(100) * len(uniform_selection)/100
print(np.sum(uniform_selection))
print(np.sum(expected_freq))
print(sci.stats.chisquare(uniform_selection,expected_freq))
