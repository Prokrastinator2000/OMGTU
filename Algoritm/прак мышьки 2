//на вход подается кол во серых мышей
//кол во белых мышей
//это изначально какое кол во мышей было
//рассажены по кругу
//подается какую мышь сьедаем
//и количество серых мышей которые должно остаться
//кол во белых мышей которое должно остаться
//необходимо определить как бедет рассажены мышки
//чтобы при выходе только с позиции серой мышки при сьедании каждой катой
//с входными данными получились выходные
//(первая мышь сначала не сьедается)
Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

// positions [pos, state]
// state 0 - dead
// state 1 - alive

*******************************************************************************/
using System;
class HelloWorld
{


    static int GetCountOfWhite(string[] good_pos)
    {
        int count = 0;
        int n = good_pos.Length;
        for (int c = 0; c < n; c++)
        {
            if (good_pos[c] == "white") count++;
        }
        return count;
    }
    static int GetCountOfBlack(string[] good_pos)
    {
        int count = 0;
        int n = good_pos.Length;
        for (int c = 0; c < n; c++)
        {
            if (good_pos[c] == "black") count++;
        }
        return count;
    }


    static int cat_jump(int[][] positions, int cat_pos, int delta)
    {
        // сдвигает кота на дельту вперед, учитывая перескакивание с конца массива и мертвых мышей
        while (delta != 0)
        {
            bool step = false;
            while (step == false)
            {
                if (cat_pos == positions.Length - 1)
                {
                    cat_pos = 0;
                }
                else
                {
                    cat_pos++;
                }
                if (positions[cat_pos][1] != 0)
                {
                    step = true;
                }
            }
            delta = delta - 1;
        }
        return cat_pos;
    }

    static int[][] MouseRoll(int[][] positions, int k, int need_alive)
    {
        // ест каждую k мышь, пока не останется need_alive
        // стартовую мышь не ест


        int cat_pos = 0;


        int count_killed_mouses = 0;
        while (positions.Length - count_killed_mouses != need_alive)
        {
            cat_pos = cat_jump(positions, cat_pos, k);
            positions[cat_pos][1] = 0;
            count_killed_mouses++;
        }
        return positions;

    }
    static void Main()
    {

        Console.WriteLine("Введите количество серых мышей");
        int black_n = Convert.ToInt32(Console.ReadLine());
        Console.WriteLine("Введите количество белых мышей");
        int white_n = Convert.ToInt32(Console.ReadLine());
        int n = white_n + black_n;
        Console.WriteLine("Съедать каждую k мышь, k = ");
        int k = Convert.ToInt32(Console.ReadLine());

        Console.WriteLine("Введите количество серых мышей, которые должны остаться");
        int black_n_should_live = Convert.ToInt32(Console.ReadLine());
        Console.WriteLine("Введите количество белых мышей, которые должны остаться");
        int white_n_should_live = Convert.ToInt32(Console.ReadLine());
        //начинаем всегда с серой мыши, на позиции выживших назначаем should_live
        int[][] positions = new int[n][];
        for (int i = 0; i < n; i++)
        {
            positions[i] = new int[2];
            positions[i][0] = i;
            positions[i][1] = 1;
        }
        positions = MouseRoll(positions, k, white_n_should_live + black_n_should_live);

        string[] good_positions = new string[n];

        int placed_black_should_live = 0;
        int placed_white_should_live = 0;

        // пытаемся разместить всех should_live по позициям, может не получится
        // нулевая позиция это всегда серая мышь
        for (int i = 0; i < n; i++)
        {
            if (i == 0)
            {
                good_positions[i] = "black";
                //placed_black_should_live++;
                if (positions[i][1] != 0) placed_black_should_live++;
            }
            else if (positions[i][1] != 0)
            {
                if (placed_black_should_live != black_n_should_live)
                {
                    good_positions[i] = "black";
                    placed_black_should_live++;
                }
                else if (placed_white_should_live != white_n_should_live)
                {
                    good_positions[i] = "white";
                    placed_white_should_live++;
                }
            }
        }

        // размещаем мышей, на позиции мертвых
        for (int i = 1; i < n; i++)
        {
            if (positions[i][1] == 0)
            {
                if (white_n - GetCountOfWhite(good_positions) > 0)
                {
                    good_positions[i] = "white";
                }
                else if (black_n - GetCountOfBlack(good_positions) > 0)
                {
                    good_positions[i] = "black";
                }
            }
        }

        bool placing_impossible = false;
        if ((GetCountOfBlack(good_positions) != black_n) || (GetCountOfWhite(good_positions) != white_n))
        {
            placing_impossible = true;
        }

        for (int i = 0; i < n; i++)
        {
            if ((good_positions[i] != "black") && (good_positions[i] != "white"))
            {
                placing_impossible = true;
            }
        }

        if (placing_impossible == false)
        {
            // печатаем результат
            for (int i = 0; i < n; i++)
            {
                Console.WriteLine($"{i} - {good_positions[i]}");
            }
        }
        else
        {
            Console.WriteLine("Такое размещение невозможно");
        }

    }
}
